import { Low } from 'lowdb'
import { JSONFile } from 'lowdb/node'
import { join, dirname } from 'path';
import { fileURLToPath } from 'url';

// Chemin vers le fichier de base de donn√©es
const __dirname = dirname(fileURLToPath(import.meta.url));
const file = join(__dirname, 'db.json');

// Cr√©er l'adaptateur pour le fichier JSON
const adapter = new JSONFile('db.json')
const db = new Low(adapter)

// Structure par d√©faut de la base de donn√©es
const defaultData = {
  tasks: {
    // Les t√¢ches seront organis√©es par date
    // Exemple: "2024-01-15": [{ id: "1", label: "T√¢che 1", ... }]
  },
  projects: [
    {
      id: '1',
      label: 'Personnel',
      color: '#10B981',
      createdAt: new Date().toISOString()
    },
    {
      id: '2',
      label: 'Travail',
      color: '#3B82F6',
      createdAt: new Date().toISOString()
    },
    {
      id: '3',
      label: 'Urgent',
      color: '#EF4444',
      createdAt: new Date().toISOString()
    }
  ],
  settings: {
    version: '1.0.0',
    lastUpdate: new Date().toISOString(),
    theme: 'light',
    autoSave: true
  }
}

// Fonction pour initialiser la base de donn√©es
export const initDatabase = async () => {
  try {
    // Lire le fichier existant
    await db.read()

    // Si le fichier n'existe pas ou est vide, cr√©er la structure par d√©faut
    if (!db.data) {
      console.log('üóÑÔ∏è  Cr√©ation de la base de donn√©es...')
      db.data = defaultData

      // Ajouter quelques t√¢ches d'exemple
      const today = new Date().toISOString().split('T')[0]
      const tomorrow = new Date(Date.now() + 86400000).toISOString().split('T')[0]

      db.data.tasks = {
        [today]: [
          {
            id: '1',
            projectId: '1',
            label: 'Faire les courses',
            urgency: 'moyenne',
            comment: 'Acheter du pain et du lait',
            createdAt: new Date().toISOString()
          },
          {
            id: '2',
            projectId: '2',
            label: 'R√©union √©quipe',
            urgency: '√©lev√©e',
            comment: 'Pr√©sentation du nouveau projet',
            createdAt: new Date().toISOString()
          }
        ],
        [tomorrow]: [
          {
            id: '3',
            projectId: '1',
            label: 'M√©decin',
            urgency: 'moyenne',
            comment: 'Rendez-vous √† 14h',
            createdAt: new Date().toISOString()
          }
        ]
      }

      await db.write()
      console.log('‚úÖ Base de donn√©es cr√©√©e avec succ√®s!')
    } else {
      console.log('üîÑ Base de donn√©es charg√©e')

      // Migration si n√©cessaire (ajout de champs manquants)
      if (!db.data.settings) {
        db.data.settings = defaultData.settings
        await db.write()
        console.log('üîß Structure mise √† jour')
      }
    }

    return true
  } catch (error) {
    console.error('‚ùå Erreur lors de l\'initialisation de la base:', error)
    throw error
  }
}

// Fonction utilitaire pour sauvegarder avec gestion d'erreur
export const safeSave = async () => {
  try {
    db.data.settings.lastUpdate = new Date().toISOString()
    await db.write()
    return true
  } catch (error) {
    console.error('‚ùå Erreur lors de la sauvegarde:', error)
    return false
  }
}

// Fonction pour faire une sauvegarde de backup
export const createBackup = async () => {
  try {
    await db.read()
    const backupData = JSON.stringify(db.data, null, 2)
    const timestamp = new Date().toISOString().replace(/[:.]/g, '-')
    const backupFileName = `backup-${timestamp}.json`

    // En environnement r√©el, vous pourriez sauvegarder dans un dossier sp√©cifique
    console.log(`üíæ Backup cr√©√©: ${backupFileName}`)
    return backupData
  } catch (error) {
    console.error('‚ùå Erreur lors de la cr√©ation du backup:', error)
    throw error
  }
}

// Fonction pour obtenir des statistiques sur la base
export const getDatabaseStats = async () => {
  try {
    await db.read()

    const totalTasks = Object.values(db.data.tasks).reduce((sum, dateTasks) => sum + dateTasks.length, 0)
    const totalProjects = db.data.projects.length
    const datesWithTasks = Object.keys(db.data.tasks).length

    return {
      totalTasks,
      totalProjects,
      datesWithTasks,
      lastUpdate: db.data.settings.lastUpdate,
      version: db.data.settings.version
    }
  } catch (error) {
    console.error('‚ùå Erreur lors de la r√©cup√©ration des stats:', error)
    return null
  }
}

// Exporter l'instance de la base
export { db }